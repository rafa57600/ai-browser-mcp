name: Comprehensive Testing Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run unit tests
      run: npx vitest run "tests/unit/**/*.test.ts" --coverage --reporter=verbose
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unit-tests
        name: unit-tests-coverage

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright browsers
      run: npx playwright install chromium
    
    - name: Run integration tests
      run: npx vitest run "tests/integration/**/*.test.ts" --testTimeout=60000 --reporter=verbose
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: test-results/

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright browsers
      run: npx playwright install chromium
    
    - name: Run E2E tests
      run: npx vitest run "tests/e2e/**/*.test.ts" --testTimeout=120000 --reporter=verbose
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: test-results/

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[run-performance]')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright browsers
      run: npx playwright install chromium
    
    - name: Run performance tests
      run: npx vitest run "tests/performance/**/*.test.ts" --testTimeout=180000 --reporter=verbose
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-test-results
        path: test-results/

  load-tests:
    name: Load Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[run-load]')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright browsers
      run: npx playwright install chromium
    
    - name: Run load tests
      run: npx vitest run "tests/load/**/*.test.ts" --testTimeout=300000 --reporter=verbose
    
    - name: Upload load test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: load-test-results
        path: test-results/

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright browsers
      run: npx playwright install chromium
    
    - name: Run security tests
      run: npx vitest run "tests/security/**/*.test.ts" --testTimeout=180000 --reporter=verbose
    
    - name: Upload security test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-test-results
        path: test-results/

  comprehensive-test-suite:
    name: Comprehensive Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 90
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[run-comprehensive]')
    needs: [unit-tests, integration-tests, e2e-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright browsers
      run: npx playwright install chromium
    
    - name: Run comprehensive test suite
      run: npx tsx tests/test-runner.ts --coverage --verbose --output=comprehensive-results
    
    - name: Upload comprehensive results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: comprehensive-test-results
        path: comprehensive-results/
    
    - name: Generate test report
      if: always()
      run: |
        echo "## üìä Comprehensive Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ -f comprehensive-results/test-report.json ]; then
          node -e "
            const report = JSON.parse(require('fs').readFileSync('comprehensive-results/test-report.json', 'utf8'));
            const passed = report.summary.passed;
            const total = report.summary.total;
            const rate = ((passed / total) * 100).toFixed(1);
            console.log(\`- **Total Suites:** \${total}\`);
            console.log(\`- **Passed:** \${passed} ‚úÖ\`);
            console.log(\`- **Failed:** \${total - passed} ‚ùå\`);
            console.log(\`- **Success Rate:** \${rate}%\`);
            console.log(\`- **Duration:** \${(report.summary.totalDuration / 1000).toFixed(1)}s\`);
          " >> $GITHUB_STEP_SUMMARY
        fi

  test-matrix:
    name: Cross-Platform Tests
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[run-matrix]')
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18, 20]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright browsers
      run: npx playwright install chromium
    
    - name: Run critical tests
      run: npx tsx tests/test-runner.ts --skip-non-critical --verbose
    
    - name: Upload matrix results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: matrix-test-results-${{ matrix.os }}-node${{ matrix.node-version }}
        path: test-results/

  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, security-tests]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        echo "Checking quality gates..."
        
        # Check if critical tests passed
        if [[ "${{ needs.unit-tests.result }}" != "success" ]]; then
          echo "‚ùå Unit tests failed"
          exit 1
        fi
        
        if [[ "${{ needs.integration-tests.result }}" != "success" ]]; then
          echo "‚ùå Integration tests failed"
          exit 1
        fi
        
        if [[ "${{ needs.e2e-tests.result }}" != "success" ]]; then
          echo "‚ùå E2E tests failed"
          exit 1
        fi
        
        if [[ "${{ needs.security-tests.result }}" != "success" ]]; then
          echo "‚ùå Security tests failed"
          exit 1
        fi
        
        echo "‚úÖ All critical tests passed"
    
    - name: Update status
      if: success()
      run: echo "üéâ Quality gates passed! Ready for deployment."

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, performance-tests, load-tests, security-tests, comprehensive-test-suite, test-matrix]
    if: always()
    
    steps:
    - name: Cleanup artifacts
      run: |
        echo "Test execution completed"
        echo "Artifacts will be automatically cleaned up after retention period"